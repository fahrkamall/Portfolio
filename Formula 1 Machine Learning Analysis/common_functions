from pyspark.sql.functions import current_timestamp

# Adds a new column `ingestion_date` with the current timestamp to the DataFrame
def add_ingestion_date(input_df):
    output_df = input_df.withColumn("ingestion_date", current_timestamp())
    return output_df

# Re-arranges columns so that the partition column is the last column in the DataFrame
def re_arrange_partition_column(input_df, partition_column):
    column_list = [column_name for column_name in input_df.schema.names if column_name != partition_column]
    column_list.append(partition_column)  # Appends the partition column at the end
    output_df = input_df.select(column_list)
    return output_df

# Overwrites data in a partitioned table, or creates the table if it does not exist
def overwrite_partition(input_df, db_name, table_name, partition_column):
    output_df = re_arrange_partition_column(input_df, partition_column)
    spark.conf.set("spark.sql.sources.partitionOverwriteMode","dynamic")
    if spark._jsparkSession.catalog().tableExists(f"{db_name}.{table_name}"):
        output_df.write.mode("overwrite").insertInto(f"{db_name}.{table_name}")
    else:
        output_df.write.mode("overwrite").partitionBy(partition_column).format("parquet").saveAsTable(f"{db_name}.{table_name}")

# Converts a specific column from a DataFrame into a list of distinct values
def df_column_to_list(input_df, column_name):
    df_row_list = input_df.select(column_name).distinct().collect()
    column_value_list = [row[column_name] for row in df_row_list]
    return column_value_list

# Merges a DataFrame with a Delta table based on the provided merge condition and partition
def merge_delta_data(input_df, db_name, table_name, folder_path, merge_condition, partition_column):
    spark.conf.set("spark.databricks.optimizer.dynamicPartitionPruning", "true")
    from delta.tables import DeltaTable
    if spark._jsparkSession.catalog().tableExists(f"{db_name}.{table_name}"):
        deltaTable = DeltaTable.forPath(spark, f"{folder_path}/{table_name}")
        deltaTable.alias("tgt").merge(
            input_df.alias("src"),
            merge_condition) \
        .whenMatchedUpdateAll() \
        .whenNotMatchedInsertAll() \
        .execute()
    else:
        input_df.write.mode("overwrite").partitionBy(partition_column).format("delta").saveAsTable(f"{db_name}.{table_name}")

